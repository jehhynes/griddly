@*
 * GriddlyButton button strip renderer using Bootstrap html and styles
 * http://griddly.com
 * Copyright 2013-2018 Chris Hynes and Data Research Group, Inc.
 * Licensed under MIT (https://github.com/programcsharp/griddly/blob/master/LICENSE)
 *
 * WARNING: Don't edit this file -- it'll be overwitten when you upgrade.
 *          Use the static properties on GriddlySettings to make config changes.
 *
 *@
 
@model IList<GriddlyButton>

@functions{
    IEnumerable<IEnumerable<GriddlyButton>> GetGroups(IEnumerable<GriddlyButton> buttons)
    {
        List<IEnumerable<GriddlyButton>> groups = new List<IEnumerable<GriddlyButton>>();

        List<GriddlyButton> currentList = null;
        foreach (var b in buttons)
        {
            if (currentList == null)
            {
                currentList = new List<GriddlyButton>();
                groups.Add(currentList);
            }

            if (b.IsSeparator)
            {
                currentList = null;
            }
            else
            {
                currentList.Add(b);
            }
        }

        groups.RemoveAll(x => x.Count() == 0);

        return groups;
    }
}

@{
    var leftGroups = GetGroups(Model.Where(x => !x.AlignRight && ViewBag.AlignRight != true));
    var rightGroups = GetGroups(Model.Where(x => x.AlignRight || ViewBag.AlignRight == true));
}

@if (Model.Any())
{
    if (rightGroups.Any())
    {
        <div class="btn-toolbar @ViewBag.ClassName @(GriddlySettings.Css.FloatRight)">
            @foreach (var group in rightGroups)
            {
                if (group.Count() > 1 || group.First().Buttons.Count() == 0)
                {
                    @:<div class="btn-group">
                }
                foreach (GriddlyButton button in group)
                {
                    button.AlignRight = true;
                    @Html.Partial(GriddlySettings.ButtonTemplate, button);
                }
                if (group.Count() > 1 || group.First().Buttons.Count() == 0)
                {
                    @:</div>
                }
            }
        </div>
    }
    if (leftGroups.Any())
    {
        <div class="btn-toolbar @ViewBag.ClassName">
            @foreach (var group in leftGroups)
            {
                if (group.Count() > 1 || group.First().Buttons.Count() == 0)
                {
                    @:<div class="btn-group">
                }
                foreach (GriddlyButton button in group)
                {
                    @Html.Partial(GriddlySettings.ButtonTemplate, button);
                }
                if (group.Count() > 1 || group.First().Buttons.Count() == 0)
                {
                    @:</div>
                }
            }
        </div>
    }
}