@*
    * GriddlyFilter form renderer using Bootstrap html and styles
    * http://griddly.com
    * Copyright 2013-2018 Chris Hynes and Data Research Group, Inc.
    * Licensed under MIT (https://github.com/programcsharp/griddly/blob/master/LICENSE)
    *
    * WARNING: Don't edit this file -- it'll be overwitten when you upgrade.
    *          Use the static properties on GriddlySettings to make config changes.
    *
*@

@model List<GriddlyFilter>

@{ 
    bool isFirstGroup = true;
}

@foreach (var filterGroup in Model.GroupBy(x => x.Group).OrderBy(x => x.Key))
{
    if (!string.IsNullOrWhiteSpace(filterGroup.Key))
    {
        <h4 class="page-header @(isFirstGroup ? "media-heading" : null)">@filterGroup.Key</h4>
    }

    isFirstGroup = false;

    foreach (var filter in filterGroup)
    {
    GriddlyFilterBox filterBox = filter as GriddlyFilterBox;
    GriddlyFilterRange filterRange = filter as GriddlyFilterRange;
    GriddlyFilterList filterList = filter as GriddlyFilterList;
    GriddlyHtmlFilter filterHtml = filter as GriddlyHtmlFilter;

        object defaultValue = this.GetGriddlyParameter(filter.Field);
        object defaultValueEnd = filterRange != null ? this.GetGriddlyParameter(filterRange.FieldEnd) : null;

    <div class="griddly-filter-form-group form-group row form-group-sm griddly-filter @(filterBox != null ? "griddly-filter-box" : null) @(filterRange != null ? "griddly-filter-range" : null) @(filterList != null ? "griddly-filter-list" : null) @(filterHtml != null ? "griddly-html-filter" : null)"
                    data-filter-name="@filter.Caption" data-filter-name-plural="@filter.CaptionPlural"
                    data-filter-field="@filter.Field"
                    @Html.AttributeIf("data-filter-fieldend", filterRange != null, x => filterRange.FieldEnd)
                    data-filter-datatype="@filter.DataType.ToString()"
                    @Html.AttributeIf("data-griddly-filter-ismultiple", filterList != null, x => filterList.IsMultiple.ToString().ToLower())
                    @Html.AttributeIf("data-griddly-filter-isnoneall", filterList != null, x => filterList.IsNoneAll.ToString().ToLower())
                    @Html.AttributeIf("data-griddly-filter-isnullable", filterList != null, x => filterList.IsNullable.ToString().ToLower())
                    @Html.AttributeIf("data-griddly-filter-displayitemcount", filterList != null, x => filterList.DisplayItemCount)
                    @Html.AttributeIf("data-griddly-filter-displayincludecaption", filterList != null, x => filterList.DisplayIncludeCaption.ToString().ToLower())>
        <label for="griddly-filter-@filter.Field" class="col-sm-3 @(GriddlySettings.IsBootstrap4?"col-form-label":"control-label")">@filter.Caption</label>
        <div class="col-sm-9">
            @if (filterBox != null)
            {
                if (filter.DataType == FilterDataType.Currency || filter.DataType == FilterDataType.Date)
                {
                    @:<div class="input-group input-group-sm">
                    if (filter.DataType == FilterDataType.Currency)
                    {
                        <span class="input-group-addon">@Griddly.Mvc.GriddlyExtensions.CurrencySymbol</span>
                    }
                    else if (filter.DataType == FilterDataType.Date)
                    {
                        <span class="input-group-addon"><i class="@(GriddlySettings.Css.Icons.Calendar)"></i></span>
                    }
                }
                    <input class="form-control @(filter.HtmlClass)" id="griddly-filter-@filter.Field" name="@filter.Field" type="text" autocomplete="off" role="presentation" value="@filter.GetEditValue(defaultValue)"
                        data-griddly-filter-data-type="@filter.DataType" />
                if (filter.DataType == FilterDataType.Currency || filter.DataType == FilterDataType.Date)
                {
                    @*@if (filter.DataType == FilterDataType.Percent)
                        {
                            <span class="input-group-addon">%</span>
                        }*@
                    @:</div>
                }
            }
            else if (filterRange != null)
            {
                <div class="row">
                    <div class="col-sm-5">
                        @if (filter.DataType == FilterDataType.Currency || filter.DataType == FilterDataType.Date)
                        {
                            @:<div class="input-group input-group-sm">
                            if (filter.DataType == FilterDataType.Currency)
                            {
                                <span class="input-group-addon">@Griddly.Mvc.GriddlyExtensions.CurrencySymbol</span>
                            }
                            else if (filter.DataType == FilterDataType.Date)
                            {
                                <span class="input-group-addon"><i class="@(GriddlySettings.Css.Icons.Calendar)"></i></span>
                            }
                        }
                            <input class="form-control @(filter.HtmlClass)" id="griddly-filter-@filter.Field" name="@filter.Field" type="text" autocomplete="off" role="presentation" value="@filter.GetEditValue(defaultValue)"
                               data-griddly-filter-data-type="@filter.DataType" />
                        @if (filter.DataType == FilterDataType.Currency || filter.DataType == FilterDataType.Date)
                        {
                            @*@if (filter.DataType == FilterDataType.Percent)
                                {
                                    <span class="input-group-addon">%</span>
                                }*@
                            @:</div>
                        }
                    </div>
                    <div class="col-sm-2 control-label" style="text-align:center">to</div>
                    <div class="col-sm-5">
                        @if (filter.DataType == FilterDataType.Currency || filter.DataType == FilterDataType.Date)
                        {
                            @:<div class="input-group input-group-sm">
                            if (filter.DataType == FilterDataType.Currency)
                            {
                                <span class="input-group-addon">@Griddly.Mvc.GriddlyExtensions.CurrencySymbol</span>
                            }
                            else if (filter.DataType == FilterDataType.Date)
                            {
                                <span class="input-group-addon"><i class="@(GriddlySettings.Css.Icons.Calendar)"></i></span>
                            }
                        }
                            <input class="form-control @(filter.HtmlClass)" id="griddly-filter-@(filter.Field)-to" name="@filterRange.FieldEnd" type="text" autocomplete="off" role="presentation" value="@filter.GetEditValue(defaultValueEnd)"
                               data-griddly-filter-data-type="@filter.DataType" />
                        @if (filter.DataType == FilterDataType.Currency || filter.DataType == FilterDataType.Date)
                        {
                            @*@if (filter.DataType == FilterDataType.Percent)
                                {
                                    <span class="input-group-addon">%</span>
                                }*@
                            @:</div>
                        }
                    </div>
                </div>
            }
            else if (filterList != null)
            {
                filterList.SetSelectedItems(defaultValue);

                <select class="form-control" id="griddly-filter-@filter.Field" name="@filter.Field" @(filterList.IsMultiple ? "multiple" : null)>
                    @foreach (SelectListItem item in filterList.Items)
                    {
                        SelectListItemGroup group = item as SelectListItemGroup;

                        if (group != null)
                        {
                            <optgroup label="@group.Text">
                                @foreach (SelectListItem childItem in group.Items)
                                {
                                    @RenderListItem(childItem)
                                }
                            </optgroup>
                        }
                        else
                        {
                            @RenderListItem(item)
                        }
                    }
                </select>
            }
            else if (filterHtml != null)
            {
                @filterHtml.HtmlTemplate(filter)
            }
        </div>
    </div>
}
}

@helper RenderListItem(SelectListItem item)
{
    <option value="@item.Value" @(item.Selected ? "selected" : null)>@item.Text</option>
}