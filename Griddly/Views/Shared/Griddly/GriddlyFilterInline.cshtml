@*
    * GriddlyFilter inline renderer
    * http://griddly.com
    * Copyright 2013-2015 Chris Hynes and Data Research Group, Inc.
    * Licensed under MIT (https://github.com/programcsharp/griddly/blob/master/LICENSE)
    *
    * WARNING: Don't edit this file -- it'll be overwitten when you upgrade.
    *          Use the static properties on GriddlySettings to make config changes.
    *
*@

@model GriddlySettings

@for (int i = 0; i < Model.Columns.Count; i++)
{
    GriddlyColumn column = Model.Columns[i];

    <td class="@column.ClassName @(column.DefaultSort != null ? (column.DefaultSort == SortDirection.Descending ? "sorted_d" : "sorted_a") : null)">
        @if (column.Filter != null)
        {
            GriddlyFilter filter = column.Filter;
            GriddlyFilterBox filterBox = filter as GriddlyFilterBox;
            GriddlyFilterRange filterRange = filter as GriddlyFilterRange;
            GriddlyFilterList filterList = filter as GriddlyFilterList;

            <div class="btn-group griddly-filter @(filterBox != null ? "griddly-filter-box" : null) @(filterRange != null ? "griddly-filter-range" : null) @(filterList != null ? "griddly-filter-list" : null)"
                    data-filter-name="@filter.Caption" data-filter-name-plural="@filter.CaptionPlural"
                    data-filter-datatype="@filter.DataType.ToString()"
                    @Html.AttributeIf("data-griddly-filter-ismultiple", filterList != null, x => filterList.IsMultiple.ToString().ToLower())
                    @Html.AttributeIf("data-griddly-filter-isnoneall", filterList != null, x => filterList.IsNoneAll.ToString().ToLower())
                    @Html.AttributeIf("data-griddly-filter-displayitemcount", filterList != null, x => filterList.DisplayItemCount)>
                @{
                    object defaultValue = this.GetGriddlyDefault(filter.Field);
                    object defaultValueEnd = filterRange != null ? this.GetGriddlyDefault(filterRange.FieldEnd) : null;
                }
                <a class="btn btn-link btn-xs filter-trigger">
                    <span class="griddly-filter-display">
                        @if (filterBox != null)
                        {
                            if (defaultValue != null)
                            {
                                if (filter.DataType == FilterDataType.String)
                                {
                                    <text>Contains "@filter.GetFormattedValue(defaultValue)"</text>
                                }
                                else
                                {
                                    @filter.GetFormattedValue(defaultValue)
                                }
                            }
                            else
                            {
                                <text>Any @filter.Caption</text>
                            }
                        }
                        else if (filterRange != null)
                        {
                            if (defaultValue != null && defaultValueEnd != null)
                            {
                                <text>@filter.GetFormattedValue(defaultValue) - @filter.GetFormattedValue(defaultValueEnd)</text>
                            }
                            else if (defaultValue != null)
                            {
                                <text>@(filter.DataType == FilterDataType.Date ? "After" : ">=") @filter.GetFormattedValue(defaultValue)</text>
                            }
                            else if (defaultValueEnd != null)
                            {
                                <text>@(filter.DataType == FilterDataType.Date ? "Before" : "<=") @filter.GetFormattedValue(defaultValueEnd)</text>
                            }
                            else
                            {
                                <text>All @filter.CaptionPlural</text>
                            }
                        }
                        else if (filterList != null)
                        {
                            filterList.SetSelectedItems(defaultValue);
                                
                            int allCount = filterList.SelectableItems.Count;
                            int selectedCount = filterList.SelectableItems.Count(x => x.Selected);
                                                                
                            if (selectedCount == allCount || (selectedCount == 0 && filterList.IsNoneAll))
                            {
                                <text>@(allCount == 2 ? "Both " : "All ") @filter.CaptionPlural</text>
                            }
                            else if (selectedCount > filterList.DisplayItemCount)
                            {
                                <text>@(selectedCount) @filter.CaptionPlural</text>
                            }
                            else if (selectedCount > 0 && selectedCount <= filterList.DisplayItemCount)
                            {
                                @(string.Join(", ", filterList.SelectableItems.Where(x => x.Selected).Take(Math.Min(selectedCount, filterList.DisplayItemCount)).Select(x => x.Text)))
                            }
                            else
                            {
                                <text>No @filter.CaptionPlural</text>
                            }
                        }
                    </span>
                    <span class="caret"></span>
                </a>
                <div class="filter-content">
                    @if (filterBox != null)
                    {
                        <div class="input-group input-group-sm">
                            @if (filter.DataType == FilterDataType.Currency)
                            {
                                <span class="input-group-addon">@Griddly.Mvc.GriddlyExtensions.CurrencySymbol</span>
                            }
                            else if (filter.DataType == FilterDataType.Date)
                            {
                                <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                            }
                            <input class="form-control" name="@filter.Field" type="text" value="@filter.GetEditValue(defaultValue)"
                                data-griddly-filter-data-type="@filter.DataType" />
                            @*@if (filter.DataType == FilterDataType.Percent)
                                {
                                    <span class="input-group-addon">%</span>
                                }*@
                            <span class="input-group-btn">
                                <a class="btn btn-default griddly-filter-clear"><i class="glyphicon glyphicon-remove"></i></a>
                            </span>
                        </div>
                    }
                    else if (filterRange != null)
                    {
                        <div class="input-group input-group-sm">
                            @if (filter.DataType == FilterDataType.Currency)
                            {
                                <span class="input-group-addon">@Griddly.Mvc.GriddlyExtensions.CurrencySymbol</span>
                            }
                            else if (filter.DataType == FilterDataType.Date)
                            {
                                <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                            }
                            <input class="form-control" name="@filter.Field" type="text" value="@filter.GetEditValue(defaultValue)"
                                data-griddly-filter-data-type="@filter.DataType" />
                            @*@if (filter.DataType == FilterDataType.Percent)
                                {
                                    <span class="input-group-addon">%</span>
                                }*@
                            <span class="input-group-btn">
                                <a class="btn btn-default griddly-filter-clear"><i class="glyphicon glyphicon-remove"></i></a>
                            </span>
                        </div>
                        <div style="text-align:center">to</div>
                        <div class="input-group input-group-sm">
                            @if (filter.DataType == FilterDataType.Currency)
                            {
                                <span class="input-group-addon">@Griddly.Mvc.GriddlyExtensions.CurrencySymbol</span>
                            }
                            else if (filter.DataType == FilterDataType.Date)
                            {
                                <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                            }
                            <input class="form-control" name="@filterRange.FieldEnd" type="text" value="@filter.GetEditValue(defaultValueEnd)"
                                data-griddly-filter-data-type="@filter.DataType" />
                            @*@if (filter.DataType == FilterDataType.Percent)
                                {
                                    <span class="input-group-addon">%</span>
                                }*@
                            <span class="input-group-btn">
                                <a class="btn btn-default griddly-filter-clear"><i class="glyphicon glyphicon-remove"></i></a>
                            </span>
                        </div>
                    }
                    else if (filterList != null)
                    {
                        if (filterList.IsMultiple)
                        {
                            <div class="input-group griddly-filter-buttons">
                                <span class="input-group-btn">
                                    <a class="btn btn-default griddly-select-all"><i class="glyphicon glyphicon-check"></i> Select All</a>
                                </span>
                                <span class="input-group-btn">
                                    <a class="btn btn-default  griddly-clear"><i class="glyphicon glyphicon-ban-circle"></i> Clear</a>
                                </span>
                            </div>
                        }
                        <ul class="dropdown-menu" role="menu">
                            @foreach (SelectListItem item in filterList.Items)
                            {
                                SelectListItemGroup group = item as SelectListItemGroup;

                                if (group != null)
                                {
                                    <li class="griddly-list-group-header"><b>@group.Text</b></li>
                                    foreach (SelectListItem childItem in group.Items)
                                    {
                                        @RenderListItem(filterList, childItem, true)
                                    }
                                }
                                else
                                {
                                    @RenderListItem(filterList, item)
                                }
                            }
                        </ul>
                    }
                </div>
            </div>
        }
    </td>
}

@helper RenderListItem(GriddlyFilterList filter, SelectListItem item, bool isGrouped = false)
{
    <li class="@(item.Selected ? "griddly-filter-selected" : null) @(isGrouped ? "griddly-list-group" : null)">
        <a>
            <input name="@filter.Field" type="@(filter.IsMultiple ? "checkbox" : "radio")" checked="@(item.Selected)" value="@item.Value" />
            <i class="glyphicon glyphicon-@(filter.IsMultiple ? "ok" : "record") griddly-filter-selected-indicator"></i>
            @item.Text
        </a>
    </li>
}